import torch
import torchvision
from torchvision.datasets import CocoDetection
from torchvision.transforms import transforms
from torch.utils.data import DataLoader
from torch.optim import SGD
from torch.optim.lr_scheduler import StepLR
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from torchvision.transforms import functional as F
import json
from pycocotools.cocoeval import COCOeval

coco_data_path = 'path/to/coco/data'
coco_train = CocoDetection(root=f'{coco_data_path}/train2017', annFile=f'{coco_data_path}/annotations/instances_train2017.json')
coco_val = CocoDetection(root=f'{coco_data_path}/val2017', annFile=f'{coco_data_path}/annotations/instances_val2017.json')

transform = transforms.Compose([transforms.ToTensor()])

train_loader = DataLoader(coco_train, batch_size=4, shuffle=True, collate_fn=lambda x: tuple(zip(*x)))
val_loader = DataLoader(coco_val, batch_size=4, shuffle=False, collate_fn=lambda x: tuple(zip(*x)))

model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
num_classes = 91
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model.to(device)

params = [p for p in model.parameters() if p.requires_grad]
optimizer = SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)
scheduler = StepLR(optimizer, step_size=3, gamma=0.1)

num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    for images, targets in train_loader:
        images = [image.to(device) for image in images]
        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]
        optimizer.zero_grad()
        loss_dict = model(images, targets)
        losses = sum(loss for loss in loss_dict.values())
        losses.backward()
        optimizer.step()
    scheduler.step()
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {losses.item()}')

torch.save(model.state_dict(), 'faster_rcnn_coco.pth')

model.eval()
images, _ = next(iter(val_loader))
images = [image.to(device) for image in images]
with torch.no_grad():
    predictions = model(images)

fig, ax = plt.subplots(1, 1, figsize=(12, 8))
image = images[0].cpu()
ax.imshow(F.to_pil_image(image))

for box in predictions[0]['boxes']:
    rect = patches.Rectangle(
        (box[0], box[1]), box[2] - box[0], box[3] - box[1], 
        linewidth=2, edgecolor='r', facecolor='none'
    )
    ax.add_patch(rect)

plt.show()

coco_results = []
model.eval()

for images, targets in val_loader:
    images = [img.to(device) for img in images]
    with torch.no_grad():
        outputs = model(images)
    for target, output in zip(targets, outputs):
        image_id = target['image_id'].item()
        for box, score, label in zip(output['boxes'], output['scores'], output['labels']):
            coco_results.append({
                'image_id': image_id,
                'category_id': label.item(),
                'bbox': box.tolist(),
                'score': score.item()
            })

with open('coco_results.json', 'w') as f:
    json.dump(coco_results, f)

coco_eval = COCOeval(coco_val.coco, coco_val.coco.loadRes('coco_results.json'), 'bbox')
coco_eval.evaluate()
coco_eval.accumulate()
coco_eval.summarize()
